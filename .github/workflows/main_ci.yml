name: MAIN_CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/app_ci.yml'
      - 'target_root_app/**'
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - 'README_zh_CN.md'
      - 'DEVELOPNOTE.md'
      - '.readthedocs.yaml'

  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/app_ci.yml'
      - 'target_root_app/**'
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - 'README_zh_CN.md'
      - 'DEVELOPNOTE.md'
      - '.readthedocs.yaml'

  workflow_dispatch:

jobs:
  main_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Install prerequisites
        shell: bash -l {0}
        run: |
          sudo apt update
          sudo apt install -y wget device-tree-compiler ninja-build git build-essential          \
                pkg-config zlib1g-dev libglib2.0-0 libglib2.0-dev libsdl1.2-dev libpixman-1-dev  \
                libfdt-dev autoconf automake libtool librbd-dev libaio-dev flex                  \
                bison make cmake gcc python3 ninja-build vim swig python3-dev libedit-dev        \
                libncurses5-dev liblzma-dev lua5.3 liblua5.3-dev libxml2-dev doxygen graphviz    \
                ninja-build pkg-config libglib2.0-dev libpixman-1-dev libgtk-3-dev libcap-ng-dev \
                libattr1-dev device-tree-compiler bison flex

      - name: Cache toolchain
        uses: actions/cache@v2
        env:
          cache-name: cache-toolchain
        with:
          path: |
            /opt/gcc-riscv64-unknown-linux-gnu
            /opt/gcc-riscv64-unknown-elf
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Download and extract prebuilt toolchain
        shell: bash -l {0}
        run: |
          RISCV_GLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-linux-gnu
          RISCV_NEWLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-elf
          if [ ! -d "$RISCV_GLIBC_TOOLCHAIN" ]; then
            # download prebuilt toolchain
            wget https://github.com/riscv/riscv-gnu-toolchain/releases/download/2021.08.07/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
            tar -xzf riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
            mv riscv $RISCV_GLIBC_TOOLCHAIN
            rm -f *.tar.gz
            # strip binaries
            cd $RISCV_GLIBC_TOOLCHAIN
            set +e
            for i in `find libexec bin -type f`
            do
              strip -s $i
            done
            cd -
            $RISCV_GLIBC_TOOLCHAIN/bin/riscv64-unknown-linux-gnu-gcc -v
          fi
          if [ ! -d "$RISCV_NEWLIBC_TOOLCHAIN" ]; then
            # download prebuilt toolchain
            wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
            tar -xzf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
            mv riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14 $RISCV_NEWLIBC_TOOLCHAIN
            rm -f *.tar.gz
            # strip binaries
            cd $RISCV_NEWLIBC_TOOLCHAIN
            set +e
            for i in `find libexec bin -type f`
            do
              strip -s $i
            done
            cd -
            $RISCV_NEWLIBC_TOOLCHAIN/bin/riscv64-unknown-elf-gcc -v
          fi

      - name: Build all
        shell: bash -l {0}
        run: |
          # replace pkexec with sudo for ci
          sed -i 's/pkexec/sudo/g' build.sh
          ./build.sh all
          # perupload
          sudo rm -rf ./output/rootfs/bootfs ./output/rootfs/rootfs ./output/rootfs/target
          tar -czf output.tar.gz output/ update_tools/ run.sh update_tools.sh
          tar -czf toolchain.tar.gz /opt/gcc-riscv64-unknown-linux-gnu /opt/gcc-riscv64-unknown-elf
          sed -i 's/-audiodev sdl,id=audio0/-audiodev none,id=audio0/g' run.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: output
          path: |
            output.tar.gz
          retention-days: 1

      - name: Upload prebuilt toolchain
        uses: actions/upload-artifact@v2.2.4
        with:
          name: prebuilt_toolchain
          path: |
            toolchain.tar.gz

      - name: Run tests uart update
        shell: bash -l {0}
        run: |
          conda create -n tools python=3.9.7 -y
          conda activate tools
          pip3 install -r ./update_tools/requirements_pip.txt
          echo "run.sh update_test"
          timeout --foreground -s SIGKILL 3m ./run.sh update_test > >(tee run_qemu.log) &
          sleep 8
          echo "update_tools.sh"
          timeout --foreground -s SIGKILL 3m ./update_tools.sh > >(tee run_tools.log) && {
            if cat run_tools.log | grep "update firmware done"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in updater process"
              exit 1
            fi
          }

      - name: Run tests pflash boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m ./run.sh nographic default pfalsh > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }

      - name: Run tests spi boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m ./run.sh nographic default spi > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }

      - name: Run tests sd boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m ./run.sh nographic default sd > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }

  qemu_w64_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: build_docker_image
        shell: bash -l {0}
        run: |
          cd qemu-6.0.0
          ./tests/docker/docker.py --engine docker build -t qemu/fedora -f tests/docker/dockerfiles/fedora.docker --registry registry.gitlab.com/qemu-project/qemu --add-current-user

      - uses: addnab/docker-run-action@v3
        with:
          image: qemu/fedora:latest
          options: -w /home/runner/work/quard_star_tutorial/quard_star_tutorial -v /home/runner:/home/runner
          shell: bash -l {0}
          run: |
            ./build.sh qemu_w64

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: qemu_w64
          path: |
            output/qemu_w64
            run.bat
          retention-days: 1

  qemu_macos_build:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          brew install libffi gettext glib pkg-config autoconf automake pixman ninja
          
      - name: Build all
        run: |
          ./build.sh qemu_macos

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: qemu_macos
          path: |
            output/qemu_macos
          retention-days: 1

  quard_star_tools_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0

      - name: Install prerequisites
        shell: bash -l {0}
        run: |
          sudo apt update
          sudo apt install -y make gcc upx-ucl

      - name: Build all
        shell: bash -l {0}
        run: |
          cd quard_star_tools
          git describe --always --long --dirty --abbrev=10 --exclude '*' | awk '{print "\""$0"\""}' > git_tag.inc
          sed -i 's/git_tag.inc/git_tag.ci.inc/g' quard_star_tools.pro
          sed -i 's/upx-ucl/cp $$DESTDIR\/$$TARGET $$DESTDIR\/quard_star_tools_temp; upx-ucl/g' quard_star_tools.pro
          lrelease quard_star_tools.pro
          qmake -makefile
          make
          cd ./tools/ci_build_deb
          ./build.sh
          cd -
          mkdir gui_tools
          mv ./release/out ./gui_tools/quard_star_tools
          tar -czf quard_star_tools.tar.gz gui_tools/ run_quard_star_tools.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: quard_star_tools
          path: |
            ./quard_star_tools/quard_star_tools.tar.gz
          retention-days: 1

  quard_star_tools_w64_build:
    runs-on: windows-2019

    steps:
      - name: sparseCheckout
        run: |
          git clone --filter=blob:none --no-checkout --depth 1 --single-branch -b "$env:GITHUB_REF".Split('/')[2] --sparse "https://$env:GITHUB_ACTOR:$env:GITHUB_TOKEN@github.com/$env:GITHUB_REPOSITORY.git" .
          git config core.protectNTFS false
          git sparse-checkout init --cone
          git sparse-checkout add quard_star_tools
          git checkout

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          arch: win64_mingw81

      - name: Build all
        run: |
          cd quard_star_tools
          git describe --always --long --dirty --abbrev=10 --exclude '*' | ./tools/awk/awk.exe '{print \"\\\"\"$0\"\\\"\"}'  > git_tag.inc
          ./tools/sed/sed.exe -i "s/git_tag.inc/git_tag.ci.inc/g" quard_star_tools.pro
          lrelease quard_star_tools.pro
          qmake -makefile
          mingw32-make
          windeployqt.exe ./release/out/quard_star_tools.exe
          Copy-Item C:/ProgramData/Chocolatey/lib/mingw/tools/install/mingw64/x86_64-w64-mingw32/lib/*.dll ./release/out/
          Rename-Item ./release/out quard_star_tools_w64
          Rename-Item ./release gui_tools

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: quard_star_tools_w64
          path: |
            ./quard_star_tools/gui_tools/quard_star_tools_w64
            ./quard_star_tools/run_quard_star_tools.bat
          retention-days: 1

  quard_star_tools_macos_build:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0

      - name: Install prerequisites
        run: |
          ruby - e  "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null  2 > /dev/null
          brew install --build-from-source upx

      - name: Build all
        shell: bash -l {0}
        run: |
          cd quard_star_tools
          git describe --always --long --dirty --abbrev=10 --exclude '*' | awk '{print "\""$0"\""}' > git_tag.inc
          sed -i'.original' -e 's/git_tag.inc/git_tag.ci.inc/g' quard_star_tools.pro
          lrelease quard_star_tools.pro
          qmake -makefile
          make
          cd ./release/out
          macdeployqt quard_star_tools.app -dmg -verbose=2
          cd -
          mkdir ./gui_tools
          mkdir ./gui_tools/quard_star_tools_macos
          mv ./release/out/quard_star_tools.dmg ./gui_tools/quard_star_tools_macos/quard_star_tools.dmg
          tar -czf quard_star_tools.tar.gz gui_tools/ run_quard_star_tools.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: quard_star_tools_macos
          path: |
            ./quard_star_tools/quard_star_tools.tar.gz
          retention-days: 1

  release_linux:
    runs-on: ubuntu-20.04
    needs: [main_build, quard_star_tools_build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: output

      - uses: actions/download-artifact@v2
        with:
          name: quard_star_tools

      - name: release_packet
        shell: bash -l {0}
        run: |
          tar -xzvf output.tar.gz
          tar -xzvf quard_star_tools.tar.gz
          rm -rf output.tar.gz quard_star_tools.tar.gz
          rm -rf output/busybox
          rm -rf ./output/lowlevelboot/lowlevelboot.elf
          rm -rf ./output/lowlevelboot/lowlevelboot.hex
          rm -rf ./output/lowlevelboot/lowlevelboot.lst
          rm -rf ./output/lowlevelboot/lowlevelboot.map
          rm -rf ./output/mask_rom/mask_rom.elf
          rm -rf ./output/mask_rom/mask_rom.hex
          rm -rf ./output/mask_rom/mask_rom.lst
          rm -rf ./output/mask_rom/mask_rom.map
          rm -rf ./output/opensbi/fw_jump.elf
          rm -rf ./output/opensbi/fw_jump.lst
          rm -rf ./output/trusted_domain/trusted_fw.elf
          rm -rf ./output/trusted_domain/trusted_fw.hex
          rm -rf ./output/trusted_domain/trusted_fw.lst
          rm -rf ./output/trusted_domain/trusted_fw.map
          rm -rf ./output/uboot/u-boot.elf
          rm -rf ./output/uboot/u-boot.lst
          rm -rf ./output/uboot/u-boot.map
          tar -czf release_linux.tar.gz gui_tools/ update_tools/ output/ run.sh update_tools.sh run_quard_star_tools.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: release_linux
          path: |
            release_linux.tar.gz

  release_windows:
    runs-on: ubuntu-20.04
    needs: [main_build, qemu_w64_build, quard_star_tools_w64_build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: output

      - uses: actions/download-artifact@v2
        with:
          name: qemu_w64

      - uses: actions/download-artifact@v2
        with:
          name: quard_star_tools_w64

      - name: release_packet
        shell: bash -l {0}
        run: |
          tar -xzvf output.tar.gz
          rm -rf output.tar.gz update_tools.sh update_tools run.sh
          rm -rf output/busybox output/qemu
          rm -rf ./output/lowlevelboot/lowlevelboot.elf
          rm -rf ./output/lowlevelboot/lowlevelboot.hex
          rm -rf ./output/lowlevelboot/lowlevelboot.lst
          rm -rf ./output/lowlevelboot/lowlevelboot.map
          rm -rf ./output/mask_rom/mask_rom.elf
          rm -rf ./output/mask_rom/mask_rom.hex
          rm -rf ./output/mask_rom/mask_rom.lst
          rm -rf ./output/mask_rom/mask_rom.map
          rm -rf ./output/opensbi/fw_jump.elf
          rm -rf ./output/opensbi/fw_jump.lst
          rm -rf ./output/trusted_domain/trusted_fw.elf
          rm -rf ./output/trusted_domain/trusted_fw.hex
          rm -rf ./output/trusted_domain/trusted_fw.lst
          rm -rf ./output/trusted_domain/trusted_fw.map
          rm -rf ./output/uboot/u-boot.elf
          rm -rf ./output/uboot/u-boot.lst
          rm -rf ./output/uboot/u-boot.map
          zip -r release_win64.zip gui_tools/ output/ run.bat run_quard_star_tools.bat

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: release_win64
          path: |
            release_win64.zip

  release_macos:
    runs-on: ubuntu-20.04
    needs: [main_build, qemu_macos_build, quard_star_tools_macos_build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: output

      - uses: actions/download-artifact@v2
        with:
          name: qemu_macos

      - uses: actions/download-artifact@v2
        with:
          name: quard_star_tools_macos

      - name: release_packet
        shell: bash -l {0}
        run: |
          tar -xzvf output.tar.gz
          tar -xzvf quard_star_tools.tar.gz
          rm -rf output.tar.gz quard_star_tools.tar.gz
          rm -rf output/busybox output/qemu
          rm -rf ./output/lowlevelboot/lowlevelboot.elf
          rm -rf ./output/lowlevelboot/lowlevelboot.hex
          rm -rf ./output/lowlevelboot/lowlevelboot.lst
          rm -rf ./output/lowlevelboot/lowlevelboot.map
          rm -rf ./output/mask_rom/mask_rom.elf
          rm -rf ./output/mask_rom/mask_rom.hex
          rm -rf ./output/mask_rom/mask_rom.lst
          rm -rf ./output/mask_rom/mask_rom.map
          rm -rf ./output/opensbi/fw_jump.elf
          rm -rf ./output/opensbi/fw_jump.lst
          rm -rf ./output/trusted_domain/trusted_fw.elf
          rm -rf ./output/trusted_domain/trusted_fw.hex
          rm -rf ./output/trusted_domain/trusted_fw.lst
          rm -rf ./output/trusted_domain/trusted_fw.map
          rm -rf ./output/uboot/u-boot.elf
          rm -rf ./output/uboot/u-boot.lst
          rm -rf ./output/uboot/u-boot.map
          mv ./quard_star_tools/gui_tools ./gui_tools
          tar -czf release_macos.tar.gz gui_tools/ output/ run.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: release_macos
          path: |
            release_macos.tar.gz
